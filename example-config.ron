// optional to specify the structure name
KvarnConfig (
    extensions: {
        // define sets of extensions, and then add several sets of extensions to hosts
        // several of the same can be used (if they don't override the previous)
        "icelk": [
            NoDefaults,
            // the following are excluded when using `NoDefaults`
            RedirectIndexHtml,
            Referrer(None),
            CorsSafe,
            CspSafe,
            Nonce,
            RedirectHttpToHttps,
            // adds the present internal extensions
            // [ "download", "cache", "hide", "private" (same as hide),
            //  "allow-ips", "tmpl" (templates), and "push" (HTTP/2 push) ]
            AllDefaults,
            Templates,
            Http2Push (
                // interval before we push again
                push_interval: 120,
                // every nth request to check if we should push again
                check_every_request: 8,
            ),

            // Only runs if predicate is true
            If (
                // required
                // predicate can also be Not(...), And [...], and Or [...]
                predicate: Exists("../ulogger"),
                // required
                extension: Php (
                    // required
                    // tls:// and udp:// are also available
                    connection: "unix:///run/ulogger.sock",
                    // required
                    // where on the website to capture all requests
                    capture_route: "/ulogger/",
                    // required
                    // kvarn shutdown down if this doesn't exist
                    working_directory: "../ulogger/",
                )
            ),
            ClientCache ({
                ".png": Changing,
                ".avif": Full,
                ".jpg": Full,
                ".ico": Full,
                ".woff2": Full,
                "/highlight.js/": Full,
            }),
            Csp ({
                // Bases `CspRule` on the `default`
                "*": FromDefault ({ img_src: [ Uri ("https://kvarn.org") ] }),
                // Bases `CspRule` on the rule found at `inherit`
                "/index.html": Inherit ("/", { script_src: [ UnsafeInline ] }),
                // the following two are equivalent
                "/api/*": FromEmpty ({}),
                "/ip": Empty,
                "/ulogger/*": FromDefault ({
                    // default-src directive
                    default_src: [
                        Uri ("https://maps.googleapis.com"),
                        Uri ("https://maps.gstatic.com")
                    ],
                    // img-src directive
                    img_src: [
                        Uri("https://*.openstreetmap.org"),
                        Uri("https://maps.googleapis.com"),
                        Uri("https://maps.gstatic.com"),
                        Scheme("data:")
                    ],
                }),
                "/admin": FromDefault ({ default_src: [ UnsafeInline ] }),
                "/quizlet-learn/login.html": FromDefault ({ default_src: [ UnsafeInline ] }),
                "/articles/*": FromDefault ({
                    style_src: [
                        UnsafeInline,
                        Uri("https://fonts.googleapis.com"),
                        Uri("https://fonts.googleapis.com"),
                    ],
                    default_src: [ Uri("https://fonts.gstatic.com") ],
                }),
            }),
            Cors ({
                // cache is optional and in seconds (client side)
                // origins is required to not be empty
                // methods is optional
                "/logo.svg": ( cache: 1209600, origins: ["https://github.com", "https://doc.kvarn.org"] ),
                "/favicon.svg": ( cache: 1209600, origins: ["https://doc.kvarn.org"] ),
                "/images/*": ( origins: ["https://icelk.dev"], methods: [POST] )
            }),

            ReverseProxy (
                // required
                route: "/private-ical/",
                // required
                connection: "tcp://localhost:5232",
                // in seconds, decimals are allowed
                timeout: 10,
                options: [
                    AddHeader("x-script-name", "/private-ical"),
                    // The actual pattern to strip by is determined by the host's `folder_default`
                    StripIndexHtml (
                        // optional, if your default is different.
                        index_html_name: "/index.html"
                    ),
                    // Forwards the real IP as `x-real-ip`
                    ForwardIp,
                    // Disable URL rewrite (so the request URL isn't modified)
                    // Not recommended
                    DisableUrlRewrite,
                ]
            ),
            Auth (
                // required
                credentials: SpaceSepparatedAccoutPerLine("quizlet-learn.passwd"),
                // required
                // `TODO`: allow user to specify a public (validation) key instead of the private (secret) key.
                secret: "quizlet-learn.secret",
                // required
                auth_api_route: "/quizlet-learn/auth",
                // required (is usually a page telling the user they're unauthorized or the login page)
                unauthorized_route: "/quizlet-learn/login.",
                // required
                // Can only be StartsWith or AcceptAll
                filter: StartsWith("/quizlet-learn/"),
                // time between authentication token refreshes.
                // higher intervals decreases auth server load, but if someone steals a user's
                // JWT, they have full, irrevocable access for the duration of this interval
                jwt_refresh_interval: 3600,
                // see https://docs.rs/kvarn-auth/0.1.0/kvarn_auth/struct.Builder.html
                lax_samsite: false,
                relaxed_httponly: false,
                force_relog_on_ip_change: false,
                jwt_cookie_name: "auth-jwt",
                credentials_cookie_name: "auth-credentials",
                // use `x-real-ip` header instead of connection address for IP check
                behind_reverse_proxy: true,
            ),

            ViewCounter (
                // required
                filter: StartsWith("/"),
                // required
                log_path: "../icelk-views",
                commit_interval: 3600,
                accept_same_ip_interval: 3600,
            )
        ],
    },
    hosts: [
        // reads names and alter
        Plain (
            // Doesn't need name as that's read from the certificate

            // required
            cert: "icelk-cert.pem",
            // required
            pk: "icelk-pk.pem",
            // required
            path: "../icelk.dev",
            // required
            extensions: ["icelk"],
            // you can however override the name, if you for example use a self-signed cert
            name_override: Some("icelk.dev"),
            // all the values are optional
            options: (
                disable_fs: false,
                no_http_to_https_redirect: true,
                disable_client_cache: false,
                disable_fs_cache: false,
                disable_response_cache: false,
                disable_server_cache: false,
                brotli_level: 7,
                gzip_level: 7,
                // off by default
                hsts: true,
                // kvarn redirects `/kvarn/` to `/kvarn/index.html`
                folder_default: "index.html",
                // kvarn also redirects `/icelk.` to `/icelk.html`
                extension_default: "html",
            ),
            // see https://docs.rs/kvarn-search/0.4.0/kvarn_search/struct.Options.html
            addons: [
                SearchEngine (
                    // required
                    api_route: "/search",
                    // required
                    kind: Lossless,
                    // example value
                    ignore_paths: ["/rsync-ignore"],
                    force_refresh: true,
                    word_count_limit: 2_500,
                    response_hits_limit: 10,
                    query_max_length: 100,
                    query_max_terms: 10,
                    additional_paths: [],
                    index_wordpress_sitemap: true,
                )
            ],
        ),
        /*
        // tries to load the certificates, but falls back to only serving unencrypted HTTP
        // if that fails.
        TryCertificatesOrUnencrypted (
            // required
            name: "icelk.dev",
            // required
            cert: "icelk.cert",
            // required
            pk: "icelk.pk",
            // required
            path: "../icelk.dev",
            // required
            extensions: ["icelk"],
            // all the values are optional
            // Options is optional (you can have just parentheses)
            options: HostOptions (
                // these are the alternative names your site will also be recognized by
                alternative_names: ["icelk.com"],
                hsts: true,
            ),
            // see reference above
            addons: [],
        ),
        Http (
            // required
            name: "doc.icelk.dev",
            // required
            path: "../icelk.dev/docs",
            // required
            extensions: [],
            // like Plain, except no_http_to_https_redirect
            // all the values are optional
            options: (),
            addons: [],
        )*/
    ],
    // only required if you want to use `Collection` as a port source.
    host_collections: {
        "s": ["icelk.dev"],
    },
    ports: Map({
        8080: ( encrypted: false, source: Collection("s") ),
        8443: ( encrypted: true, source: Collection("s") ),
    }),
    // or
    // here, Hosts can also be a Collection
    // Standard binds 80 (HTTP with redirect to HTTPS) and 443 (HTTPS)
    //ports: Standard(Host("icelk.dev")),
    // or
    // or HttpsOnly
    //ports: HttpOnly(Hosts(["icelk.dev", "kvarn.org"])),
)
